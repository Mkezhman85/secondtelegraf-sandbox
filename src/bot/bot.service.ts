import 'dotenv/config';
import { Markup, Scenes, Telegraf } from 'telegraf';
import LocalSession from 'telegraf-session-local';
import { IMyContext } from './sessions.interface';
import { IBotService } from './bot.service.interface';
const { leave, enter } = Scenes.Stage;
import { ILogger } from '../services/logger.interface';
import { TYPES } from '../types';
import { injectable, inject } from 'inversify';
import 'reflect-metadata';
import { IConfigService } from '../config/config.service.interface';
import { IUserService } from '../subjects/users/users.service.interface';
import { commands } from './bot_command';
import { ICityService } from '../subjects/cities/city.service.interface';
import { ITopicService } from '../subjects/topics/topic.service.interface';
import { IPromotionService } from '../subjects/promotions/promotion.service.interface';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';

@injectable()
export class BotService implements IBotService {
	bot: Telegraf;

	constructor(
		@inject(TYPES.ILogger) private loggerService: ILogger,
		@inject(TYPES.ConfigService) private configService: IConfigService,
		@inject(TYPES.UserService) private userService: IUserService,
		@inject(TYPES.CityService) private cityService: ICityService,
		@inject(TYPES.TopicService) private topicService: ITopicService,
		@inject(TYPES.PromotionService) private promotionService: IPromotionService,
	) {
		this.bot = new Telegraf(this.configService.get('TOKEN'));
	}

	init(): void {
		try {
			const token = this.configService.get('TOKEN');
			const getCityScene = new Scenes.BaseScene<IMyContext>('getCityScene');
			const getTopicScene = new Scenes.BaseScene<IMyContext>('getTopicScene');
			const getPromotionsScene = new Scenes.BaseScene<IMyContext>('getPromotionsScene');
			const stage = new Scenes.Stage<IMyContext>();
			stage.register(getCityScene, getTopicScene, getPromotionsScene);
			const bot = new Telegraf<IMyContext>(token);
			bot.use(new LocalSession({ database: 'session.json' }).middleware());
			bot.use(stage.middleware());
			bot.use((ctx, next) => {
				ctx.session.myProp;
				ctx.scene.session.myProps;
				next();
			});

			let city: string;
			let topic: string;

			bot.start(async (ctx) => {
				await ctx.replyWithMarkdown(
					`–ü—Ä–∏–≤–µ—Ç, ${
						ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'
					}! –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏*`,
					Markup.inlineKeyboard([Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin')]),
				);
			});

			bot.hears('‚èÆ –í—ã—Ö–æ–¥', async (ctx) => {
				ctx.scene.leave();
				ctx.replyWithMarkdown('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤—ã—Ö–æ–¥. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*');
			});

			bot.action('begin', async (ctx) => {
				await ctx.scene.enter('getCityScene');
				await ctx.reply(
					'üåÜ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥...',
					Markup.inlineKeyboard([
						Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
						Markup.button.callback('üåÜ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤', 'citiesList'),
						Markup.button.callback('üõç –°–ø–∏—Å–æ–∫ —Ç–µ–º–∞—Ç–∏–∫', 'topicList'),
					]),
				);
			});

			bot.action('citiesList', async (ctx) => {
				const allCities = await this.cityService.getAllCities();
				const citiesKeys: InlineKeyboardButton[][] = [];
				if (allCities?.length) {
					allCities.forEach((c) => {
						citiesKeys.push([{ text: c.name, callback_data: c.name }]);
					});
					await ctx.reply(`–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≥–æ—Ä–æ–¥–∞:`, {
						reply_markup: {
							inline_keyboard: citiesKeys,
						},
					});
					await ctx.scene.enter('getCityScene');
				} else {
					ctx.reply(
						'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≥–æ—Ä–æ–¥–∞...',
						Markup.inlineKeyboard([
							Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
							Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
						]),
					);
				}
			});

			bot.action('topicList', async (ctx) => {
				const allTopics = await this.topicService.getAllTopics();
				const topi—ÅKeys: InlineKeyboardButton[][] = [];
				if (allTopics?.length) {
					allTopics.forEach((t) => {
						topi—ÅKeys.push([{ text: t.title, callback_data: t.title }]);
					});
					ctx.reply(`üõç –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º–∞—Ç–∏–∫:`, {
						reply_markup: {
							inline_keyboard: topi—ÅKeys,
						},
					});
					ctx.scene.enter('getPromotionsScene');
				} else {
					ctx.reply(
						'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–∞—Ç–∏–∫–∏...',
						Markup.inlineKeyboard([
							Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
							Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
						]),
					);
				}
			});

			bot.action('back', (ctx) => {
				ctx.scene.leave();
				ctx.replyWithMarkdown('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤—ã—Ö–æ–¥. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*');
			});

			getCityScene.on('text', async (ctx) => {
				city = ctx.message.text;
				const existedCity = await this.cityService.getCityInfo(city);
				console.log(existedCity);
				await ctx.reply(`üåÜ –í—ã —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥ ${city}`);
				if (existedCity) {
					ctx.scene.leave();
					ctx.scene.enter('getTopicScene');
				} else {
					await ctx.reply(
						`üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≥–æ—Ä–æ–¥ ${city} –Ω–µ –Ω–∞–π–¥–µ–Ω... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...`,
						Markup.inlineKeyboard([Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back')]),
					);
					ctx.scene.reenter();
				}
			});

			getTopicScene.enter(async (ctx) => {
				const allTopics = await this.topicService.getAllTopics();
				const topi—ÅKeys: InlineKeyboardButton[][] = [];
				if (allTopics?.length) {
					allTopics.forEach((t) => {
						topi—ÅKeys.push([{ text: t.title, callback_data: t.title }]);
					});
					ctx.reply(`üõç –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º–∞—Ç–∏–∫:`, {
						reply_markup: {
							inline_keyboard: topi—ÅKeys,
						},
					});
					ctx.reply(
						'–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É...',
						Markup.inlineKeyboard([Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back')]),
					);
					ctx.scene.enter('getPromotionsScene');
				} else {
					ctx.reply(
						'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–∞—Ç–∏–∫–∏...',
						Markup.inlineKeyboard([
							Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
							Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
						]),
					);
				}
			});

			getPromotionsScene.on('text', async (ctx) => {
				topic = ctx.message.text;
				const existedTopic = await this.topicService.getTopicInfo(topic);
				if (existedTopic) {
					const promotions = await this.promotionService.findPromotions(city, topic);
					const promotionsKeys: InlineKeyboardButton[][] = [];
					if (promotions?.length) {
						promotions.forEach((p) => {
							promotionsKeys.push([{ text: p.title, callback_data: p.title }]);
						});
						await ctx.reply(`–í –≥–æ—Ä–æ–¥–µ ${city} –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}":`, {
							reply_markup: {
								inline_keyboard: promotionsKeys,
							},
						});
						await ctx.reply(
							'‚ÑπÔ∏è –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É –∞–∫—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É...',
							Markup.inlineKeyboard([
								Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
								Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
							]),
						);
					} else {
						ctx.reply(
							`–í –≥–æ—Ä–æ–¥–µ ${city} –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π...`,
							Markup.inlineKeyboard([
								Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
								Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
							]),
						);
						ctx.scene.leave();
					}
				} else {
					ctx.reply(
						`–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç–µ–º–∞—Ç–∏–∫–∞ "${topic}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...`,
						Markup.inlineKeyboard([
							Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
							Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
						]),
					);
					ctx.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —É–∫–∞–∑–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É...');
					ctx.scene.reenter();
				}
				ctx.scene.leave();
			});

			bot.help((ctx) => ctx.reply(commands));

			bot.launch();

			// Enable graceful stop
			process.once('SIGINT', () => bot.stop('SIGINT'));
			process.once('SIGTERM', () => bot.stop('SIGTERM'));
			this.loggerService.log(`[BotService] –ë–æ—Ç ${bot.botInfo} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...`);
		} catch (err) {
			if (err instanceof Error) {
				this.loggerService.error('[BotService] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: ', err.message);
			}
		}
	}
}
